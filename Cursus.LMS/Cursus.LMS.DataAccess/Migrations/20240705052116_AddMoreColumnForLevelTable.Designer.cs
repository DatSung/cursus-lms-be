// <auto-generated />
using System;
using Cursus.LMS.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cursus.LMS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240705052116_AddMoreColumnForLevelTable")]
    partial class AddMoreColumnForLevelTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cursus.LMS.Model.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "BestZedAndYasuo",
                            AccessFailedCount = 0,
                            Address = "123 Admin St",
                            AvatarUrl = "https://example.com/avatar.png",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "55e21a88-a8ab-4ff9-8eec-86f90b0f66da",
                            Country = "Country",
                            CreateTime = new DateTime(2024, 7, 5, 5, 21, 15, 633, DateTimeKind.Utc).AddTicks(8112),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin User",
                            Gender = "Male",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE/mm52z8qWGkjgpMjXl+CMnVWq/p/DETXXx8UtFfVWVl8TY6MXnNH97fPQCadkfvw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6e1147a9-2d2c-4674-b051-20771910bf23",
                            TaxNumber = "123456789",
                            TwoFactorEnabled = false,
                            UpdateTime = new DateTime(2003, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CartDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CoursePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CartHeaderId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CartHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("CartHeaders");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActivatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeactivatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MergedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MergedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StudentSlots")
                        .HasColumnType("int");

                    b.Property<float?>("TotalRate")
                        .HasColumnType("real");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseReports");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseSectionVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseVersionId");

                    b.ToTable("CourseSectionVersions");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LearningTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("OldPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LevelId");

                    b.ToTable("CourseVersions");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseVersionComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseVersionId");

                    b.ToTable("CourseVersionComments");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseVersionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseVersionId");

                    b.ToTable("CourseVersionStatus");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BodyContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallToAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FooterContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalizationTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreHeaderText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubjectLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("172d2cc5-ebb7-433b-b152-dfb462ddb334"),
                            BodyContent = "Dear [UserFullName],<br><br>Welcome to Cursus! We are excited to have you join our learning community.",
                            CallToAction = "<a href=\"https://cursus.com/login\">Login</a>",
                            Category = "Welcome",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5946),
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "Thank you for signing up!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "Welcome to Cursus!",
                            TemplateName = "WelcomeEmail",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5965)
                        },
                        new
                        {
                            Id = new Guid("a00651ab-165c-45f5-bc85-e7e147cd611d"),
                            BodyContent = "Hi [UserFullName],<br><br>We received a request to reset your password. Click the link below to reset your password.",
                            CallToAction = "http://localhost:30475/sign-in/verify-email?userId=user.Id&token=Uri.EscapeDataString(token)",
                            Category = "Security",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5972),
                            FooterContent = "If you did not request a password reset, please ignore this email.",
                            Language = "English",
                            PersonalizationTags = "[UserFullName], [ResetPasswordLink]",
                            PreHeaderText = "Reset your password to regain access",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "Reset Your Password",
                            TemplateName = "ForgotPasswordEmail",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5973)
                        },
                        new
                        {
                            Id = new Guid("7736a38f-a5a9-4d6b-8a95-456709b4c751"),
                            BodyContent = "<p>Thank you for registering your Cursus account. Click here to go back the page</p>",
                            CallToAction = "<a href=\"{{Login}}\">Login now</a>",
                            Category = "Verify",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5977),
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LinkLogin}",
                            PreHeaderText = "User Account Verified!",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "Cursus Verify Email",
                            TemplateName = "SendVerifyEmail",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5978)
                        },
                        new
                        {
                            Id = new Guid("51f873e9-63ae-48e6-894e-de74f44e237d"),
                            BodyContent = "<h2>-Your Account has been aprroval!</h2>",
                            CallToAction = "<p><a href='http://bloodmoonrpg.carrd.co?token={token}' style='padding: 10px 20px; color: white; background-color: #007BFF; text-decoration: none;'>Verify</a></p>",
                            Category = "Approval",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5982),
                            FooterContent = "<p>Thank you for your waiting! Click this to go to the main page</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "Circus Verify Email For Instructor Approval",
                            RecipientType = "Instructor",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "Circus Verify Email For Instructor Approval",
                            TemplateName = "SendEmailForInstructorApproval",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(5983)
                        },
                        new
                        {
                            Id = new Guid("972539f3-8603-47c8-8883-c40a7f130f75"),
                            BodyContent = "<p>Hello {FirstName},</p><p>Click <a href=\"{ResetLink}\">here</a> to reset your password.</p>",
                            CallToAction = "<a href=\"{{ResetLink}}\">Reset Password</a>",
                            Category = "Security",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6006),
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {ResetLink}",
                            PreHeaderText = "Reset your password to regain access.",
                            RecipientType = "Customer",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "Reset Your Password",
                            TemplateName = "ChangePassword",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6007)
                        },
                        new
                        {
                            Id = new Guid("adfbefe9-6d26-4fc0-9031-84940936bece"),
                            BodyContent = "<p>Your {courseTitle} course led by {instructorName} is inactive.</p>",
                            CallToAction = "<a href=\"{{LoginLink}}\">Login Now</a>",
                            Category = "Notification",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6010),
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FullName}",
                            PreHeaderText = "Hello friends,",
                            RecipientType = "Customer",
                            SenderEmail = "instructor@gmail.com",
                            SenderName = "Instructor",
                            Status = 1,
                            SubjectLine = "Inactive Course",
                            TemplateName = "InactiveCourseEmail",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6011)
                        },
                        new
                        {
                            Id = new Guid("7b28c84b-3695-4a28-b9ab-8af45252fd3f"),
                            BodyContent = "New course has been added by Instructor, please check in the main page.",
                            CallToAction = "<a href=\"https://cursus.com/login\">Login</a>",
                            Category = "Notice for admin",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6015),
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "The New Courses is available",
                            RecipientType = "Admin",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "New course has been created!",
                            TemplateName = "NotificationForAdminAboutNewCourse",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6016)
                        },
                        new
                        {
                            Id = new Guid("204315d2-441a-4b5b-86b8-f91b14b69d29"),
                            BodyContent = "New course has been approved by Admin, please check in the main page.",
                            CallToAction = "<a href=\"https://cursus.com/login\">Login</a>",
                            Category = "Notice for instructor",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6019),
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "The New Courses is available now",
                            RecipientType = "Instructor",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "Your course has been approved!",
                            TemplateName = "ApproveInstructorCourse",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6020)
                        },
                        new
                        {
                            Id = new Guid("710cf85e-90d1-4cb4-9b0e-2f9e75f6d832"),
                            BodyContent = "New course has been rejected by Admin, please check in the main page.",
                            CallToAction = "<a href=\"https://cursus.com/login\">Login</a>",
                            Category = "Notice for instructor",
                            CreateBy = "System",
                            CreateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6023),
                            FooterContent = "<p>Contact us at cursusservicetts@gmail.com</p>",
                            Language = "English",
                            PersonalizationTags = "{FirstName}, {LastName}",
                            PreHeaderText = "The New Courses is not available now",
                            RecipientType = "Instructor",
                            SenderEmail = "cursusservicetts@gmail.com",
                            SenderName = "Cursus Team",
                            Status = 1,
                            SubjectLine = "Your course has been rejected!",
                            TemplateName = "RejectInstructorCourse",
                            UpdateBy = "Admin",
                            UpdateTime = new DateTime(2024, 7, 5, 12, 21, 15, 749, DateTimeKind.Local).AddTicks(6024)
                        });
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Instructor", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AcceptedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.InstructorComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorComments");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.InstructorRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorRatings");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.OrderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CoursePrice")
                        .HasColumnType("float");

                    b.Property<Guid>("OrderHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.OrderHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPayout")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.PaymentCard", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CardNumber");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentCards");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.SectionDetailsVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseSectionVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("DocsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlideUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseSectionVersionId");

                    b.ToTable("SectionDetailsVersions");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.StudentCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LearningTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8fa7c7bb-b4dc-480d-a660-e07a90855d5d",
                            ConcurrencyStamp = "STUDENT",
                            Name = "STUDENT",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "35446074-daa5-4973-bf02-82301a5eb327",
                            ConcurrencyStamp = "INSTRUCTOR",
                            Name = "INSTRUCTOR",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = "8fa7c7bb-daa5-a660-bf02-82301a5eb327",
                            ConcurrencyStamp = "ADMIN",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "BestZedAndYasuo",
                            RoleId = "8fa7c7bb-daa5-a660-bf02-82301a5eb327"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CartDetails", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.CartHeader", "CartHeader")
                        .WithMany()
                        .HasForeignKey("CartHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartHeader");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CartHeader", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Category", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Course", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseReport", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseReview", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseSectionVersion", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.CourseVersion", "CourseVersions")
                        .WithMany()
                        .HasForeignKey("CourseVersionId");

                    b.Navigation("CourseVersions");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseVersion", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Cursus.LMS.Model.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Cursus.LMS.Model.Domain.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.Navigation("Category");

                    b.Navigation("Course");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseVersionComment", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.CourseVersion", "CourseVersion")
                        .WithMany()
                        .HasForeignKey("CourseVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseVersion");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.CourseVersionStatus", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.CourseVersion", "CourseVersion")
                        .WithMany()
                        .HasForeignKey("CourseVersionId");

                    b.Navigation("CourseVersion");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Instructor", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.InstructorComment", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.InstructorRating", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.OrderDetails", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.OrderHeader", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.PaymentCard", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.SectionDetailsVersion", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.CourseSectionVersion", "CourseSectionVersions")
                        .WithMany()
                        .HasForeignKey("CourseSectionVersionId");

                    b.Navigation("CourseSectionVersions");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.Student", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Cursus.LMS.Model.Domain.StudentCourse", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Cursus.LMS.Model.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cursus.LMS.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cursus.LMS.Model.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
